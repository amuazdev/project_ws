// Generated by gencpp from file mobile_base/joy.msg
// DO NOT EDIT!


#ifndef MOBILE_BASE_MESSAGE_JOY_H
#define MOBILE_BASE_MESSAGE_JOY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobile_base
{
template <class ContainerAllocator>
struct joy_
{
  typedef joy_<ContainerAllocator> Type;

  joy_()
    : dirA(false)
    , dirB(false)
    , speedA(0)
    , speedB(0)  {
    }
  joy_(const ContainerAllocator& _alloc)
    : dirA(false)
    , dirB(false)
    , speedA(0)
    , speedB(0)  {
  (void)_alloc;
    }



   typedef uint8_t _dirA_type;
  _dirA_type dirA;

   typedef uint8_t _dirB_type;
  _dirB_type dirB;

   typedef int16_t _speedA_type;
  _speedA_type speedA;

   typedef int16_t _speedB_type;
  _speedB_type speedB;





  typedef boost::shared_ptr< ::mobile_base::joy_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobile_base::joy_<ContainerAllocator> const> ConstPtr;

}; // struct joy_

typedef ::mobile_base::joy_<std::allocator<void> > joy;

typedef boost::shared_ptr< ::mobile_base::joy > joyPtr;
typedef boost::shared_ptr< ::mobile_base::joy const> joyConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobile_base::joy_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobile_base::joy_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mobile_base

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'mobile_base': ['/home/amz/fyp_ws/src/mobile_base/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mobile_base::joy_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobile_base::joy_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobile_base::joy_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobile_base::joy_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobile_base::joy_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobile_base::joy_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobile_base::joy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "65a21cca78a5147fa5f897d0fbef56fe";
  }

  static const char* value(const ::mobile_base::joy_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x65a21cca78a5147fULL;
  static const uint64_t static_value2 = 0xa5f897d0fbef56feULL;
};

template<class ContainerAllocator>
struct DataType< ::mobile_base::joy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobile_base/joy";
  }

  static const char* value(const ::mobile_base::joy_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobile_base::joy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool dirA\n\
bool dirB\n\
int16 speedA\n\
int16 speedB\n\
";
  }

  static const char* value(const ::mobile_base::joy_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobile_base::joy_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dirA);
      stream.next(m.dirB);
      stream.next(m.speedA);
      stream.next(m.speedB);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct joy_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobile_base::joy_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobile_base::joy_<ContainerAllocator>& v)
  {
    s << indent << "dirA: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dirA);
    s << indent << "dirB: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dirB);
    s << indent << "speedA: ";
    Printer<int16_t>::stream(s, indent + "  ", v.speedA);
    s << indent << "speedB: ";
    Printer<int16_t>::stream(s, indent + "  ", v.speedB);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILE_BASE_MESSAGE_JOY_H
